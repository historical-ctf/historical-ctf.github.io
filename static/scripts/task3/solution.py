import util


def decrypt(c1, c2, c3, n1, n2, n3):
    """
    Decrypt by executing a Low Public Exponent Attack based on the Chinese Remainder Theorem.
    For a good explanation:
        http://crypto.stackexchange.com/questions/6713/low-public-exponent-attack-for-rsa
    """
    t1 = c1 * (n2 * n3) * util.modinv(n2 * n3, n1)
    t2 = c2 * (n1 * n3) * util.modinv(n1 * n3, n2)
    t3 = c3 * (n1 * n2) * util.modinv(n1 * n2, n3)
    cubed = (t1 + t2 + t3) % (n1 * n2 * n3)
    return util.iroot(cubed, 3)

if __name__ == '__main__':
    # Low public exponent
    e = 3

    # Three different moduli
    n1 = 125937155004547218496521768527207202915163450287586010084627567508452645366141005543727896093945108996117798300763614155044977463721749412491992616535339753196766001959397078451639903421741375908654383664782582117702746456600499865140152121697127212187974407340827320503537855966363416505297344618994039196071L
    n2 = 114375765435641209220991194634036417678418097848204136093883698100169266849377580059238796142265949460001900302185069563035936123237881148468388503047801154967642718077004829179218477417406325031102969807250049121054630462155075406137066270989890876405287681283415234649553015060230864328849271790442161265103L
    n3 = 113032293844062778010552135120097153168770917678858274028680086222545480165106452752219139785525290848507010951828716457031328998245087374551488793643104802019037058773444067789324196497483148274793006559472819358670510016004791401014599787288476859621262777445432028566517254297253949266303285696167912794039L

    # Encrypts the 'secret' message
    message = """
    URL: https://swissco-bank.herokuapp.com/
    Wired to: 3761 Spacewars Street, Melbourne, Australia
    """
    m = util.serialize(message)
    c1 = util.encrypt(m, e, n1)
    c2 = util.encrypt(m, e, n2)
    c3 = util.encrypt(m, e, n3)

    print util.deserialize(decrypt(c1, c2, c3, n1, n2, n3))
